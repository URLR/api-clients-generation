openapi: 3.0.0
info:
  title: 'URLR API Reference'
  description: "API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>\n        <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>"
  termsOfService: 'https://urlr.me/en/terms-of-use'
  contact:
    name: URLR
    url: 'https://urlr.me/en'
    email: contact@urlr.me
  license:
    name: 'All rights reserved'
    url: 'https://urlr.me/en/legal-notice'
  version: '1.0'
servers:
  -
    url: 'https://urlr.me/api/v1'
    description: 'Main API entry point'
paths:
  /access_tokens/create:
    post:
      tags:
        - 'Access Tokens'
      summary: 'Get an access token'
      operationId: createAccessToken
      requestBody:
        description: 'Your credentials'
        content:
          application/json:
            schema:
              required:
                - username
                - password
              properties:
                username:
                  description: Email
                  type: string
                password:
                  description: Password
                  type: string
              type: object
      responses:
        '200':
          description: 'Access token'
          content:
            application/json:
              schema:
                properties:
                  token: { description: 'Access token (JWT) valid for 1 hour', type: string }
                  refresh_token: { description: 'Refresh token valid for 1 month', type: string }
                type: object
        '401':
          description: Error
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'Invalid credentials.' }
                type: object
  /access_tokens/refresh:
    post:
      tags:
        - 'Access Tokens'
      summary: 'Refresh an access token'
      operationId: refreshAccessToken
      requestBody:
        description: 'Your credentials'
        content:
          application/json:
            schema:
              required:
                - refresh_token
              properties:
                refresh_token:
                  description: 'Refresh token'
                  type: string
              type: object
      responses:
        '200':
          description: 'Refreshed access token'
          content:
            application/json:
              schema:
                properties:
                  token: { description: 'Access token (JWT) valid for 1 hour', type: string }
                  refresh_token: { description: 'Refresh token valid for 1 month', type: string }
                type: object
        '401':
          description: Error
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'Missing JWT Refresh Token' }
                type: object
  '/links/{link_id}':
    get:
      tags:
        - Links
      summary: 'Get a link'
      operationId: getLink
      parameters:
        -
          name: link_id
          in: path
          description: 'Link API ID'
          required: true
          schema:
            type: string
            format: uuid
            example: ffefc6c4-d970-4373-a867-2a69c8be2c89
      responses:
        '200':
          description: Link
          content:
            application/json:
              schema:
                properties:
                  id: { description: 'Link API ID', type: string, format: uuid, example: 436b5d20-e174-4363-94e5-2b3dd4e74b5f }
                type: object
        '404':
          description: 'Not Found'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 404 }
                  detail: { type: string }
                type: object
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 401 }
                  detail: { type: string }
                type: object
        '422':
          description: 'Validation Failed'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 422 }
                  detail: { type: string }
                type: object
      security:
        -
          bearerAuth: []
  /links/create:
    post:
      tags:
        - Links
      summary: 'Create a link'
      operationId: createLink
      requestBody:
        description: 'Info of the link to create'
        content:
          application/json:
            schema:
              required:
                - url
                - team_id
              properties:
                url:
                  description: 'URL to shorten'
                  type: string
                team_id:
                  description: 'Team API ID'
                  type: string
                  format: uuid
                folder_id:
                  description: 'Folder API ID'
                  type: string
                  format: uuid
                code:
                  description: 'Custom short code'
                  type: string
                  pattern: '^[a-zA-Z0-9!-]{3,50}$'
                  example: xxxxx
                label:
                  description: Label
                  type: string
                password:
                  description: Password
                  type: string
                expired_at:
                  description: 'Expiration date'
                  type: string
                  format: date-time
              type: object
      responses:
        '201':
          description: Link
          content:
            application/json:
              schema:
                properties:
                  id: { description: 'Link API ID', type: string, format: uuid }
                  url: { description: 'Original URL', type: string }
                  team: { description: 'Team API ID', type: string, format: uuid }
                  folder_id: { description: 'Folder API ID', type: string, format: uuid }
                  domain_id: { description: Domain, type: string, example: urlr.me }
                  code: { description: 'Short code', type: string, example: xxxxx }
                  label: { description: Label, type: string }
                  created_at: { description: 'Creation date', type: string, format: date-time }
                  updated_at: { description: 'Modification date', type: string, format: date-time }
                  expired_at: { description: 'Expiration date', type: string, format: date-time }
                type: object
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 401 }
                  detail: { type: string }
                type: object
        '422':
          description: 'Validation Failed'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 422 }
                  detail: { type: string }
                type: object
        '429':
          description: 'Limits Exceeded'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 429 }
                  detail: { type: string }
                type: object
        '500':
          description: 'Internal Error'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 500 }
                  detail: { type: string }
                type: object
      security:
        -
          bearerAuth: []
  /statistics:
    post:
      tags:
        - Statistics
      summary: 'Get statistics of a link'
      operationId: getStatistics
      requestBody:
        description: 'Infos to provide to get statistics of a link'
        content:
          application/json:
            schema:
              required:
                - linkId
              properties:
                link_id:
                  description: 'Link API ID'
                  type: string
                  format: uuid
                from:
                  description: 'Get stats from this date'
                  type: string
                  format: date-time
                to:
                  description: 'Get stats until this date'
                  type: string
                  format: date-time
                include_bots:
                  description: 'Whether include bots or not in statistics'
                  type: boolean
                  default: false
              type: object
      responses:
        '200':
          description: 'Statistics of the link'
          content:
            application/json:
              schema:
                properties:
                  link_id: { description: 'Link API ID', type: string, format: uuid }
                  clicks: { description: Clicks, type: integer, example: 32 }
                  unique_clicks: { description: 'Unique clicks', type: integer, example: 51 }
                type: object
        '404':
          description: 'Not Found'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 404 }
                  detail: { type: string }
                type: object
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 401 }
                  detail: { type: string }
                type: object
        '422':
          description: 'Validation Failed'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 422 }
                  detail: { type: string }
                type: object
      security:
        -
          bearerAuth: []
  /teams:
    get:
      tags:
        - Teams
      summary: 'Get teams of user'
      operationId: getTeams
      responses:
        '200':
          description: 'Teams of user'
          content:
            application/json:
              schema:
                properties:
                  teams: { type: array, items: { properties: { id: { description: 'Team API ID', type: string, format: uuid, example: ffefc6c4-d970-4373-a867-2a69c8be2c89 }, name: { description: 'Team name', type: string, example: 'the best team' } }, type: object } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 401 }
                  detail: { type: string }
                type: object
      security:
        -
          bearerAuth: []
  '/folders/{team_id}':
    get:
      tags:
        - Folders
      summary: 'Get folders of team'
      operationId: getFolders
      parameters:
        -
          name: team_id
          in: path
          description: 'Team API ID'
          required: true
          schema:
            type: string
            format: uuid
            example: ffefc6c4-d970-4373-a867-2a69c8be2c89
      responses:
        '200':
          description: 'Folders of team'
          content:
            application/json:
              schema:
                properties:
                  folders: { type: array, items: { properties: { id: { description: 'Folder API ID', type: string, format: uuid, example: 436b5d20-e174-4363-94e5-2b3dd4e74b5f }, name: { description: 'Folder name', type: string, example: folder-campaign-google-ads } }, type: object } }
                type: object
        '404':
          description: 'Not Found'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 404 }
                  detail: { type: string }
                type: object
        '401':
          description: Unauthorized
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 401 }
                  detail: { type: string }
                type: object
        '422':
          description: 'Validation Failed'
          content:
            application/problem+json:
              schema:
                properties:
                  type: { type: string }
                  title: { type: string }
                  status: { type: integer, example: 422 }
                  detail: { type: string }
                type: object
      security:
        -
          bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
